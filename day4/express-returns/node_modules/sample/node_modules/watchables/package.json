{
  "_args": [
    [
      {
        "raw": "watchables@~0.1.0",
        "scope": null,
        "escapedName": "watchables",
        "name": "watchables",
        "rawSpec": "~0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "C:\\Users\\Sakurako\\Documents\\GitHub\\spring2017_2\\day4\\express-returns\\node_modules\\sample\\node_modules\\reducers"
    ]
  ],
  "_from": "watchables@>=0.1.0 <0.2.0",
  "_id": "watchables@0.1.0",
  "_inCache": true,
  "_location": "/watchables",
  "_npmUser": {
    "name": "gozala",
    "email": "rfobic@gmail.com"
  },
  "_npmVersion": "1.1.64",
  "_phantomChildren": {},
  "_requested": {
    "raw": "watchables@~0.1.0",
    "scope": null,
    "escapedName": "watchables",
    "name": "watchables",
    "rawSpec": "~0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eventual",
    "/reducers"
  ],
  "_resolved": "https://registry.npmjs.org/watchables/-/watchables-0.1.0.tgz",
  "_shasum": "83c38730d2d7e884c9a0357225dc011762c93b03",
  "_shrinkwrap": null,
  "_spec": "watchables@~0.1.0",
  "_where": "C:\\Users\\Sakurako\\Documents\\GitHub\\spring2017_2\\day4\\express-returns\\node_modules\\sample\\node_modules\\reducers",
  "author": {
    "name": "Irakli Gozalishvili",
    "email": "rfobic@gmail.com",
    "url": "http://jeditoolkit.com"
  },
  "bugs": {
    "url": "http://github.com/Gozala/watchables/issues/"
  },
  "dependencies": {
    "method": "~1.0.0"
  },
  "description": "Watchable value abstraction",
  "devDependencies": {
    "phantomify": "~0.x.0",
    "repl-utils": "~1.0.0",
    "test": "~0.x.0"
  },
  "directories": {},
  "dist": {
    "shasum": "83c38730d2d7e884c9a0357225dc011762c93b03",
    "tarball": "https://registry.npmjs.org/watchables/-/watchables-0.1.0.tgz"
  },
  "homepage": "https://github.com/Gozala/watchables",
  "id": "watchables",
  "keywords": [
    "watchables",
    "polymorphic",
    "method",
    "abstraction"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Gozala/watchables/License.md"
    }
  ],
  "main": "./index.js",
  "maintainers": [
    {
      "name": "gozala",
      "email": "rfobic@gmail.com"
    }
  ],
  "name": "watchables",
  "optionalDependencies": {},
  "readme": "# Watchables\n\n[![Build Status](https://secure.travis-ci.org/Gozala/watchables.png)](http://travis-ci.org/Gozala/watchables)\n\nLibrary defines watchable value abstraction, in form of three [polymorphic\nmethods][method], where each one can be extended per type.\n\n### watchers\n\n[watchables/watchers](./watchables/blob/master/watchers.js) module provides\nmethod that has no default implementation and supposed to be defined per type\nthat wishes to implement this watchable abstraction:\n\n```js\nvar watchers = require(\"watchables/watchers\")\nfunction Type() { /* ... */ }\nwatchers.define(Type, function(value) {\n  // return array of registered observes for the given value,\n  // wthich is instance of `Type`.\n})\n```\n\n### watch\n\n[watchables/watch](./watchables/blob/master/watch.js) module provides\npolymorphic method that comes with a default implementation. Given that it's\ncalled with a value that implements `watchers` method and a observer function,\nit will register given observer for the value unless it's already being\nregistered. Method can be defined for a specific type to better reflect\nit's needs.\n\n```js\nvar watch = require(\"wathchables/watch\")\nwatch(new Type(), function() {\n  console.log(\"!!!!\")\n})\n```\n\nMethod can also be extended with a type specific implementation.\n\n\n```js\nvar watch = require(\"wathchables/watch\")\nwatch.define(Type, function(value, listener) {\n  var listeners = value._listeners\n  if (typeof(listeners) === \"undefined\")\n    value._listeners = listener\n  else if (typeof(listeners) === \"function\")\n    value._listeners = [value._listeners, listener]\n  else\n    listeners.push(listener)\n})\n```\n\n\n### unwatch\n\n[watchables/unwatch](./watchables/blob/master/unwatch.js) module provides\npolymorphic method that comes with a default implementation. Given that it's\ncalled with a value that implements `watchers` method and a observer function,\nit will unregister given observer for the value, if it's registered.\n\n```js\nvar unwatch = require(\"wathchables/unwatch\")\nunwatch(value, myListener)\n```\n\nMethod can be extended with a type specific implementation.\n\n```js\nvar unwatch = require(\"wathchables/unwatch\")\nunwatch.define(Type, function(value, listener) {\n  var listeners = value._listeners\n  var index = -1\n  if (typeof(listeners) === \"function\") {\n    if (listeners === listener) value._listeners = void(0)\n  } else if (listeners && ~(index = listeners.indexOf(listener))) {\n    if (listeners.length === 2) {\n      value._listeners = index === 0 ? listeners[1] : listeners[0]\n    } else {\n      listeners.splice(index, 1)\n    }\n  }\n  return value\n})\n\n```\n\n\n## Install\n\n    npm install watchables\n\n[method]:https://github.com/Gozala/method\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Gozala/watchables.git",
    "web": "https://github.com/Gozala/watchables"
  },
  "scripts": {
    "repl": "node node_modules/repl-utils",
    "test": "npm run test-node && npm run test-browser",
    "test-browser": "node ./node_modules/phantomify/bin/cmd.js ./test/index.js",
    "test-node": "node ./test/index.js"
  },
  "version": "0.1.0"
}
